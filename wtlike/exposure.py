# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_exposure.ipynb (unless otherwise specified).

__all__ = ['contiguous', 'add_exposure_to_events', 'sec_per_day']

# Cell
def contiguous(start, stop, min_gap=2, ):
    assert len(start)==len(stop)
    ssint = np.empty(2*len(start), float)
    ssint[0::2] = start
    ssint[1::2] = stop

    # Tag the (stpp,start) pairs < 10 sec as  not adjacent
    not_adjacent = np.diff(ssint)[1::2] > min_gap ;

    # make a mask, keep ends
    mask = np.empty(len(ssint), bool)
    mask[0] = mask[-1] = True
    #

    # insert into mask -- keep only the (stop,start) pairs  which are not adjacent
    mask[1:-2:2] = not_adjacent
    mask[2:-1:2] = not_adjacent

    # apply mask, split into start and stop
    keep = ssint[mask]
    return keep

# Cell
sec_per_day = 24*3600
def add_exposure_to_events(config, exposure, photons):
    """

    """
    # get interleaved start/stop pairs for contiguous intervals
    estop = exposure.stop.values
    etime = estart =exposure.start.values

    run_times = contiguous(estart, estop, min_gap=10/sec_per_day)
    fermi_start = run_times[0]
    fermi_stop = run_times[-1]
    if config.verbose>1:
        print(f'Found {len(run_times)//2:,} contiguous intervals, interpret as runs'
              f' from {UTC(fermi_start)[:10]} to {UTC(fermi_stop)[:10]}')

    ### Determine run exposures
    vexp = exposure.exp.values /1e4 # exposure per FT2 interval -- in m^2
    cumexp = np.insert(np.cumsum(vexp), 0,0)
    if verbose>1: print(f'Total exposure: {cumexp[-1]*1e-6:.1f}  m^2 Ms')

    run_index = np.searchsorted(estart, run_times)
    run_start_exp = cumexp[run_index][0::2]

#     run_exp_diff = np.diff(run_start_exp)

    ### Assign Event exposure from event times

    if config.verbose>1: print(f'Examine {len(photons):,} photons.')

    event = photons#['time weight'.split()].copy()
    event_exposure = cumexp[np.searchsorted(estart, event.time)]
    event.loc[:,'tau'] = np.diff(np.insert(event_exposure,0,0))
    return pd.DataFrame(dict(time=run_times[0::2], exp=run_start_exp))